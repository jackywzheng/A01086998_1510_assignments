"""Dungeon and Dragons simulator."""

# Jacky Zheng
# A01086998
# 02/04/2019

import random


def roll_die(number_of_rolls, number_of_sides):
    """Roll any sided die any number of times and add the value of the rolls together.

    PRECONDITION: number_of_rolls must be a positive integer
    PRECONDITION: number_of_sides must be a positive integer
    RETURN: sum of the rolls
    """
    roll = random.randint(1, number_of_sides)  # Used recursion for this
    if number_of_rolls == 0:
        return 0  # Base case is 0. If it's 1, then I can roll 7 with 6 sides
    else:
        return roll + roll_die(number_of_rolls - 1, number_of_sides)  # Subtract 1 roll and keep calling


def choose_inventory(inventory, selection):
    """Accept a list and integer and randomly select the number of elements from the list.

    PRECONDITION: inventory must be a list with at least one element
    PRECONDITION: selection must be a positive integer and less than inventory, but greater than 0
    RETURN: a new sorted list of the selected elements"""
    if inventory is [] and selection == 0:
        return []
    elif selection < 0:
        print('You cannot have a negative selection!')
        return None
    elif selection > 0 and selection > len(inventory):
        print('You cannot select more than your inventory size!')
        return None
    elif selection == len(inventory):
        not_original_list = []
        not_original_list.extend(inventory)
        return not_original_list  # Not the original though??
    else:
        list_2 = sorted(random.sample(inventory, selection))
        return list_2


def generate_name(syllables):
    """Generate a random name of requested length.

    PRECONDITION: the function will only work for positive non-zero integers
    POSTCONDITION: prints a random name of requested length"""
    name = []
    for x in range(0, syllables):
        name.extend(generate_syllable())
    return ''.join(name).title()


def generate_vowel():
    return random.sample(['a', 'e', 'i', 'o', 'u', 'y'], 1)


def generate_consonant():
    return random.sample(['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',
                          'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'], 1)


def generate_syllable():
    return generate_vowel() + generate_consonant()


def create_character(syllables):
    """Create a D&D character with randomly generated name and stats.

    PRECONDITION: name_length must be a positive integer
    RETURN: list with name and stat rolls"""
    character = {}
    character.update({'Name': generate_name(syllables)})
    character.update({'Class': classes()})
    character.update({'Strength': roll_die(3, 6)})
    character.update({'Dexterity': roll_die(3, 6)})
    character.update({'Constitution': roll_die(3, 6)})
    character.update({'Intelligence': roll_die(3, 6)})
    character.update({'Wisdom': roll_die(3, 6)})
    character.update({'Charisma': roll_die(3, 6)})
    character.update({"XP": 0})
    return character


def classes():
    print("""Here are all the classes:
    barbarian, bard, cleric, druid, fighter, monk, paladin, ranger, rogue, sorcerer, warlock, wizard, blood hunter""")
    what_class = input('What class do you want to play as?')
    if what_class in "barbarian, bard, cleric, druid, fighter, monk, paladin, ranger, rogue, sorcerer, ' \
                     'warlock, wizard, blood hunter":
        return what_class
    else:
        print('That is not a class')


def print_character(character):
    """Accept the character formatted by the create_character function and print it.

    PRECONDITION: character must be a list generated by the create_character function
    POSTCONDITION: prints the character list"""
    print("Name:" + str(character[0]))
    print("Strength:" + str(character[1][1]))
    print("Dexterity:" + str(character[2][1]))
    print("Constitution:" + str(character[3][1]))
    print("Intelligence:" + str(character[4][1]))
    print("Wisdom:" + str(character[5][1]))
    print("Charisma:" + str(character[6][1]))
    if len(character) == 8:
        print("Inventory:" + str(character[7]))


def combat_round(opponent_one, opponent_two):
    """Simulate combat.

    PRECONDITION: will not work unless both parameters are well-formed dictionaries each containing a correct character.
    """
    opponent_one_strike = roll_die(1, 20)
    opponent_two_strike = roll_die(1, 20)



def main():
    print(classes())


if __name__ == '__main__':
    main()
